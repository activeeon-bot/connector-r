apply plugin: 'java'

buildscript {
	repositories {
		if (project.hasProperty('useMavenLocal')) {
			println "Use mavel local repository"
			mavenLocal()
		}
		mavenCentral()
		maven { url 'http://repo.activeeon.com/content/repositories/snapshots/' }
		maven { url 'http://repo.activeeon.com/content/repositories/releases/' }
 		maven { url 'http://repo.activeeon.com/content/repositories/thirdparty/' }
		maven { url 'http://spoon.gforge.inria.fr/repositories/releases/' }		
	}
}

subprojects {
	apply plugin: 'base'

	group = 'org.ow2.proactive.r_connector'
	version = '0.9-SNAPSHOT'

	rootProject.buildscript.repositories.each {
        	repositories.add(it)
	}

	task propertyCheck() << {
		println "Check required environment variables."
		assert System.getenv()['JAVA_HOME'] != null : "Environment variable 'JAVA_HOME' is not set."
		assert System.getenv()["R_HOME"] != null : "Environment variable 'R_HOME' is not set."
		assert System.getenv()["R_LIBS"] != null : "Environment variable 'R_LIBS' is not set."
	}

	test {
		forkEvery = 100
	}

	test.dependsOn propertyCheck
}



project(':par-script') {
	apply plugin: 'java'

	dependencies {
		compile "org.apache.commons:commons-lang3:3.1"

		compile "org.objectweb.proactive:programming-extension-dataspaces:5.5.0-SNAPSHOT"
		compile "org.ow2.proactive:scheduler-api:3.5.0-SNAPSHOT"
		compile "org.ow2.proactive:scheduler-node:3.5.0-SNAPSHOT"
		compile "org.ow2.proactive:common-api:3.5.0-SNAPSHOT"
		compile "org.ow2.proactive:rm-node:3.5.0-SNAPSHOT"

		compile files("${projectDir}/lib/JRIEngine.jar")
		compile files("${projectDir}/lib/JRI.jar")
		compile files("${projectDir}/lib/JRS.jar")
		compile files("${projectDir}/lib/REngine.jar")
		compile files("${projectDir}/lib/RrserveEngine.jar")	

		testCompile 'junit:junit:4.11'
	}
	
	test {
		forkEvery 1
	}
}

project(':par-connector') {
	def rExec
	def rSrc
	def env = [:]
	
	configurations {
		copyJars 
	}

	dependencies {
		 copyJars "org.ow2.proactive_grid_cloud_portal:rest-client:1.5.0-SNAPSHOT"
	}

	task pkg() << {
		// copy source
		copy {
			from file("${projectDir}/src/main/r")
			into file("${buildDir}/r-pkg-src")
		}
		// copy jars	
		copy {
			from configurations.copyJars
			into file("${buildDir}/r-pkg-src/inst/java")			
		}
		// build r package
		exec {
			workingDir "${buildDir}"
			commandLine rExec, "CMD", "INSTALL", "--build", "--preclean", "--with-keep.source", "--no-multiarch", rSrc
			environment env
		}		
	}

	task setEnv() << {
		System.getenv().each() { k,v -> 
			if ('JAVA_HOME'.equals(k)) { 
				v = v + File.separator + 'jre'
			} 
			env.put(k, v)
		}
	}

	task setRExec() << {
		if (System.properties["os.name"].toLowerCase().contains("windows")) {
			def ARCH = System.getenv()["ProgramFiles(x86)"] != null ? "x64" : "i386"
			rExec = System.getenv()["R_HOME"] + File.separator +  "bin" + File.separator + ARCH + File.separator + "R.exe"
		} else if ("linux") {
			rExec = System.getenv()["R_HOME"] + File.separator +  "bin" + File.separator + "R"
		}
	}

	task setRSrc() << {
		rSrc = file("${buildDir}/r-pkg-src").getAbsolutePath()
	}

	pkg.dependsOn propertyCheck, setEnv, setRExec, setRSrc
}


