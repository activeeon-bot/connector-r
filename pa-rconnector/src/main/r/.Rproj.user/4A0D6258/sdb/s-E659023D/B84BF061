{
    "contents" : "\nformatted_date <- function(datetime) {\n  return (J(\"org.ow2.proactive.utils.Tools\")$getFormattedDate(.jlong(datetime)))\n}\n\nformatted_duration <- function(start, end) {\n  return (J(\"org.ow2.proactive.utils.Tools\")$getFormattedDuration(.jlong(start), .jlong(end)))\n}\n\njs_get_job_data <- function(job.info, job.state) {\n  return (c(\n    paste(\"Job: \", job.info$getJobId()$value()),\n    paste(\"name: \", job.info$getJobId()$getReadableName()),\n    paste(\"owner: \", job.state$getOwner()),\n    paste(\"status: \", job.info$getStatus()$name()),\n    paste(\"#tasks: \", job.info$getTotalNumberOfTasks())))\n}\n\njs_print_job_data <- function(job.data) {\n  matrix <- matrix(unlist(job.data), nrow = 1, byrow = T)\n  write.table(matrix, \"\", quote = F, row.name = F, col.names = F)\n}\n\nget_task_data <- function(job.state) {\n  task.states <- job.state$getTasks()\n  return (sapply(task.states, function(task.state) {\n    id <- task.state$getId()$value()\n    name <- task.state$getName()\n    if (task.state$getIterationIndex() > 0) {\n      iindex <- \"\"\n    } else {\n      iindex <- task.state$getIterationIndex()\n    }\n    if (task.state$getReplicationIndex() > 0) {\n      rindex <- \"\"\n    } else {\n      rindex <- task.state$getReplicationIndex()\n    }\n    status = task.state$getStatus()$name()\n    if (is.null(task.state$getExecutionHostName())) {\n      host = \"UNKNOWN\"\n    } else {\n      host = task.state$getExecutionHostName()\n    }\n    elapsed <- formatted_duration(0, task.state$getExecutionDuration())\n    duration <- formatted_duration(task.state$getFinishedTime(), task.state$getStartTime())\n    nodes <- task.state$getNumberOfNodesNeeded()\n    \n    max <- task.state$getMaxNumberOfExecution()\n    remain <- task.state$getNumberOfExecutionLeft()\n    executed <- max - remain\n    if (executed < max) {\n      executions <- paste((executed + 1), max, sep=\"/\")\n    } else {\n      executions <- paste(executed, max, sep=\"/\")\n    }\n    max.failures <- task.state$getMaxNumberOfExecution()\n    max.failures.left <- task.state$getNumberOfExecutionOnFailureLeft()\n    nodes.killed <- paste((max.failures - max.failures.left), max.failures, sep=\"/\")    \n    \n    return (c(id = id, name = name, iindex = iindex, rindex = rindex, \n              status = status, host = host, elapsed = elapsed, \n              duration = duration, nodes = nodes, executions = executions,\n              nodes.killed = nodes.killed))\n  }))\n}\n\nprint_task_data <- function(task.info)  {\n  matrix <- matrix(unlist(task.info), nrow = length(task.info) /11, byrow = T)\n  write.table(matrix, \"\", quote = F, row.name = F, col.names = \n                c(\"ID\", \"NAME\", \"ITER\", \"DUP\", \"STATUS\", \"HOSTNAME\", \n                  \"EXEC DURATION\", \"TOT DURATION\", \"#NODES USED\", \"#EXECUTIONS\",\n                  \"#NODES KILLED\"))\n}\n\n#' Retrieves information about a ProActive job\n#' \n#' \\code{PAJobState} prints a formatted table diplaying the state of a ProActive job. \n#' \n#'  @param job.id id of the proactive job \n#'  @param client connection handle to the scheduler, if not provided the handle created by the last call to \\code{\\link{PAConnect}} will be used\n#'  @export\n#'  @seealso  \\code{\\link{PAState}}\nPAJobState <- function(job.id, \n                       client =  PAClient()) {\n  \n  if (client == NULL || is.jnull(client) ) {\n    stop(\"You are not currently connected to the scheduler, use PAConnect\")\n  } \n  \n  \n  \n  job.state <- j_try_catch ({\n    return (J(client,\"getJobState\", toString(job.id)));\n  })\n  job.info <- job.state$getJobInfo()\n  \n  js_print_job_data(js_get_job_data(job.info, job.state))\n  print_task_data(get_task_data(job.state))\n}\n\n\n",
    "created" : 1434358088894.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1704915392",
    "id" : "B84BF061",
    "lastKnownWriteTime" : 1434358152,
    "path" : "C:/Users/fviale/IdeaProjects/r_connector/par-connector/src/main/r/R/PAJobState.r",
    "project_path" : "R/PAJobState.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}