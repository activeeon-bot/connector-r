{
    "contents" : "## TODO implement all task methods\n\nsetClass( \n  Class=\"PATask\", \n  slots = c(\n     javaObject = \"jobjRef\",\n     dependencies = \"list\",\n     inputfiles = \"list\",\n     outputfiles = \"list\",\n     scatter.index = \"numeric\",\n     file.index = \"numeric\", \n     file.index.function = \"function\"\n  ),\n  prototype=prototype(\n    javaObject = new(J(\"org.ow2.proactive.scheduler.common.task.ScriptTask\")),\n    dependencies = list(),\n    inputfiles = list(),\n    outputfiles = list(),\n    scatter.index = 0,\n    file.index = 0,\n    file.index.function = toString\n  )\n)\n\nPATask <- function(name, scatter.index = 0, file.index = 0, file.index.function = toString) {  \n  tsk <- new (Class=\"PATask\", javaObject = new(J(\"org.ow2.proactive.scheduler.common.task.ScriptTask\")), dependencies = list(), scatter.index = scatter.index, file.index = file.index, file.index.function = file.index.function)\n  setName(tsk,name)\n  return (tsk)\n}\n\nPACloneTaskWithIndex <- function(task, scatter.index, file.index, file.index.function = toString) {  \n  tsk <- new (Class=\"PATask\", javaObject = task@javaObject, dependencies = task@dependencies, inputfiles =  task@inputfiles, outputfiles = task@outputfiles, scatter.index = scatter.index, file.index = file.index, file.index.function = file.index.function)\n  return (tsk)\n}\n\n\n\nsetMethod(\"getJavaObject\", \"PATask\",\n          function(object) {\n            return(object@javaObject)                          \n          } \n)\n\nsetMethod(\"getName\", \"PATask\",\n          function(object) {\n            return(object@javaObject$getName())                          \n          } \n)\n\nsetMethod(\"setName\", \"PATask\",\n          function(object,value) {\n            return(object@javaObject$setName(value))                          \n          } \n)\n\nsetMethod(\"getScript\", \"PATask\",\n          function(object) {\n            return(object@javaObject$getScript())                          \n          } \n)\n\n\n\nsetMethod(\"setScript\", \"PATask\",\n          function(object,value) {                      \n            sscript = new(J(\"org.ow2.proactive.scripting.SimpleScript\"),value,\"parscript\") \n            tscript = new(J(\"org.ow2.proactive.scripting.TaskScript\"),sscript)            \n            return(object@javaObject$setScript(tscript))                          \n          } \n)\n\nsetMethod(\"getQuoteExp\", \"PATask\",\n          function(object) {\n            if (object@scatter.index == 0) {\n              return(bquote(unserialize(results[[.(getName(object))]])))\n            } else {\n              return(bquote(unserialize(results[[.(getName(object))]])[[.(object@scatter.index)]]))\n            }\n          } \n)\n\nsetMethod(\"getFileIndex\", \"PATask\",\n          function(object) {\n            if (object@file.index == 0) {\n              return(\"\")\n            } else {\n              return(object@file.index.function(object@file.index))\n            }\n          }\n)\n\nsetReplaceMethod(\"addDependency\" ,\"PATask\" ,\n                 function(object,value) {\n                   object@dependencies <- c(object@dependencies,value)\n                   jo = object@javaObject\n                   jo$addDependence(getJavaObject(value))\n                   return(object)\n                 }\n)\n\n\nsetMethod(\"getDependencies\" ,\"PATask\" ,\n                 function(object) {\n                   return(object@dependencies)\n                 }\n)\n\n\n\nsetReplaceMethod(\"addInputFiles\" ,\"PATask\" ,\n                 function(object, value) {\n                   if (class(value) != \"PAFile\") {\n                     stop(\"unexpected argument class, expected PAFile, received \",class(value))\n                   }\n                   len <- length(object@inputfiles)\n                   object@inputfiles[[len+1]] <- value\n                   return(object)\n                 }\n)\n\n\nsetReplaceMethod(\"addOutputFiles\" ,\"PATask\" ,\n                 function(object,value) {\n                   if (class(value) != \"PAFile\") {\n                     stop(\"unexpected argument class, expected PAFile, received \",class(value))\n                   }\n                   len <- length(object@outputfiles)\n                   object@outputfiles[[len+1]] <- value\n                   return(object)\n                 }\n)\n\nsetMethod(\"addSelectionScript\" ,\"PATask\" ,\n                 function(object,value,engine,is.dynamic) {          \n                   sscript = new(J(\"org.ow2.proactive.scripting.SelectionScript\"),value,engine,is.dynamic)\n                   jo = object@javaObject    \n                   jo$addSelectionScript(sscript)              \n                   return(object)\n                 }\n)\n\nsetMethod(\"toString\",\"PATask\",\n  function(x, width = NULL, ...) {\n            object <- x\n            output <- \"ProActive Task\\n\"  \n            jo = object@javaObject\n            if (!is.null(jo$getName())) {     \n              output <- str_c(output,\"  name : \",jo$getName(),\"\\n\")\n            }\n            if (!is.null(jo$getDescription())) {  \n              output <- str_c(output,\"  description : \",jo$getDescription(),\"\\n\")\n            }\n            if (!is.null(jo$getScript())) {     \n              output <- str_c(output,\"  R script : \\n{\\n\")       \n              tscript <- jo$getScript()\n              script_text <- tscript$getScript()\n              output <- str_c(output, script_text)\n              output <- str_c(output,\"}\\n\")\n            }\n            \n            if (length(object@inputfiles) > 0) {      \n              output <- str_c(output,\"  input files : \")\n              for (i in 1:length(object@inputfiles)) {\n                output <- str_c(output,toString(object@inputfiles[[i]]))                \n                if (i < length(object@inputfiles)) {\n                  output <- str_c(output,\", \")\n                }\n              }       \n              output <- str_c(output,\"\\n\")\n            }\n            \n            if (length(object@outputfiles) > 0) {\n              output <- str_c(output,\"  output files : \")\n              for (i in 1:length(object@outputfiles)) {\n                output <- str_c(output,toString(object@outputfiles[[i]], input=FALSE))\n                if (i < length(object@outputfiles)) {\n                  output <- str_c(output,\", \")\n                }\n              }    \n              output <- str_c(output,\"\\n\")\n            }\n                        \n            if (!is.null(jo$getSelectionScripts())) {      \n              output <- str_c(output,\"  selectionScripts : \")\n              output <- str_c(output,jo$getSelectionScripts()$toString())   \n              output <- str_c(output,\"\\n\")\n            }\n            if (!is.null(jo$getPreScript())) {  \n              output <- str_c(output,\"  preScript : \",jo$getPreScript(),\"\\n\")\n            }\n            if (!is.null(jo$getPostScript())) {  \n              output <- str_c(output,\"  postScript : \",jo$getPostScript(),\"\\n\")\n            }            \n            if (!is.null(jo$getCleaningScript())) {  \n              output <- str_c(output,\"  cleanScript : \",jo$getCleaningScript(),\"\\n\")\n            }\n            if (jo$isRunAsMe()) {  \n              output <- str_c(output,\"  runAsMe : \",jo$isRunAsMe(),\"\\n\")\n            }\n            if (!is.null(jo$getResultPreview())) {  \n              output <- str_c(output,\"  resultPreview : \",jo$getResultPreview(),\"\\n\")\n            }\n            if (jo$getWallTime() > 0) {  \n              output <- str_c(output,\"  wallTime : \",jo$getWallTime(),\"\\n\")\n            }\n            if (length(object@dependencies) > 0) {      \n              output <- str_c(output,\"  dependencies : \")\n              for (i in 1:length(object@dependencies)) {\n                output <- str_c(output,getName(object@dependencies[[i]]))\n                if (i < length(object@dependencies)) {\n                  output <- str_c(output,\", \")\n                }\n              }       \n              output <- str_c(output,\"\\n\")\n            }\n                        \n            return(output)\n          } \n)\n\nsetMethod(\"show\" ,\"PATask\" ,\n          function(object) {\n            cat(toString(object))                                 \n          } \n)\n\nsetMethod(\"print\" ,\"PATask\" ,\n          function(x, ...) {\n            print(toString(x))                                 \n          } \n)\n",
    "created" : 1428945171386.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "477736851",
    "id" : "73BAAE95",
    "lastKnownWriteTime" : 1434116376,
    "path" : "C:/Users/fviale/IdeaProjects/r_connector/par-connector/src/main/r/R/PATask.r",
    "project_path" : "R/PATask.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}