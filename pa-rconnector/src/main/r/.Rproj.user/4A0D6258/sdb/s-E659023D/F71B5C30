{
    "contents" : "## TODO implement all task methods\n\nsetClass( \n  Class=\"PAFile\", \n  slots = c(\n    filepath = \"character\", # absolute or relative local file path\n    pathdest = \"character\", # data space path (can be empty if filepath is relative, in which case it will match the local relative path)\n    space = \"character\", # remote data space name\n    hash = \"character\", # hash directory used to separate the jobs, must not be empty\n    working.dir = \"character\" # local working directory, used to resolve local relative paths\n  ), \n  prototype=prototype(\n    filepath = \"\",\n    pathdest = \"\",\n    space = \"\",\n    hash = \"\",\n    working.dir = getwd()\n  )\n)\n\n\nPAFile <- function(filepath = \"\", pathdest = \"\", space = \"USER\", hash = \"\", working.dir = getwd()) {\n  if (pathdest == \"\") {\n    # testing that filepath is not absolute \n    if (!.isRelative(filepath)) {\n      stop(str_c(filepath, \" is an absolute path and no dataspace destination path is provided\"))\n    } \n  }\n  ff <- new (Class=\"PAFile\", filepath = filepath, pathdest = pathdest, space = space, hash = hash, working.dir = working.dir)\n  return (ff)\n}\n\nsetReplaceMethod(\"setHash\", \"PAFile\",\n                 function(object, value) {\n                   if (class(value) != \"character\") {\n                     stop(\"unexpected argument class, expected character, received \",class(value))\n                   }\n                   object@hash <- value\n                   return(object)\n                 }\n)\n                 \n\nsetMethod(\"pushFile\", \"PAFile\",\n          function(object, client = PAClient()) {  \n            if (object@filepath == \"\") {\n              stop(\"Cannot transfer file if no local path is provided\")\n            }\n            \n            filename <- basename(object@filepath)\n            if (object@pathdest == \"\") {\n              if (object@hash == \"\") {\n                pathdest <- str_c(\"/\",str_replace_all(dirname(object@filepath),fixed(\"\\\\\"), \"/\"))\n              } else {\n                pathdest <- str_c(\"/\",object@hash,\"/\",str_replace_all(dirname(object@filepath),fixed(\"\\\\\"), \"/\"))\n              }\n              filepath <- file.path(object@working.dir, object@filepath)\n            } else {\n              if (object@hash == \"\") {\n                pathdest <- str_c(\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"))\n              } else {\n                pathdest <- str_c(\"/\",object@hash,\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"))\n              }\n              if (.isRelative(object@filepath)) {\n                filepath <- file.path(object@working.dir,object@filepath)\n              } else {\n                filepath <- object@filepath\n              }\n            }\n            tryCatch (         \n              return(PAPushFile(toupper(object@space),pathdest, filename, filepath, .print.stack = FALSE )),                      \n              Exception = function(e) { print(str_c(\"error occurred when trying to push file \",filepath,\" -> \",toupper(object@space),\":\",pathdest,\"/\",filename))} \n              )\n          } \n)\n\nsetMethod(\"pullFile\", \"PAFile\",\n          function(object, client = PAClient()) {    \n            \n            if (object@filepath == \"\") {\n              stop(\"Cannot transfer file if no local path is provided\")\n            }\n            \n            filename <- basename(object@filepath)\n            if (object@pathdest == \"\") {\n              if (.isRelative(object@filepath)) {\n                if (object@hash == \"\") {\n                  pathname <- str_c(\"/\",str_replace_all(object@filepath,fixed(\"\\\\\"), \"/\"))\n                } else {\n                  pathname <- str_c(\"/\",object@hash,\"/\",str_replace_all(object@filepath,fixed(\"\\\\\"), \"/\"))\n                }\n                filepath <- file.path(object@working.dir, object@filepath)\n              } else {\n                stop(str_c(object@filepath, \" is an absolute path and no dataspace destination path is provided\"))\n              }\n            } else {\n              if (object@hash == \"\") {\n                pathname <- str_c(\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"),\"/\",basename(object@filepath))\n              } else {\n                pathname <- str_c(\"/\",object@hash,\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"),\"/\",basename(object@filepath))\n              }\n              if (.isRelative(object@filepath)) {\n                filepath <- file.path(object@working.dir,object@filepath)\n              }\n            }\n            \n            tryCatch (         \n              return(PAPullFile(toupper(object@space),pathname, filepath, .print.stack = FALSE  )),                      \n              Exception = function(e) { print(str_c(\"Warning, error occurred when trying to pull file \",toupper(object@space),\":\",pathname,\" -> \",filepath))} \n            )                     \n            \n          } \n)\n\nsetMethod(\"getMode\", \"PAFile\",\n          function(object, input) {\n            if (input) {\n              return(.computeInputModeFromSpaceName(object@space))\n            } else {\n              return(.computeOutputModeFromSpaceName(object@space))\n            }\n                          \n          } \n)\n\nsetMethod(\"isFileTransfer\", \"PAFile\",\n          function(object) {\n            return(object@filepath != \"\")            \n          } \n)\n\nsetMethod(\"getSelector\", \"PAFile\",\n          function(object) {           \n            if (object@pathdest == \"\") { \n              # local file with transfer\n              if (object@hash == \"\") {\n                filepath <- str_c(str_replace_all(object@filepath,fixed(\"\\\\\"), \"/\"))\n              } else {\n                filepath <- str_c(object@hash,\"/\",str_replace_all(object@filepath,fixed(\"\\\\\"), \"/\"))\n              }              \n            } else {              \n              if (object@filepath == \"\") {\n                # remote file, no transfer\n                if (object@hash == \"\") {\n                  filepath <- str_c(str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"))\n                } else {\n                  filepath <- str_c(object@hash,\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"))\n                }\n              } else {\n                # local file with transfer\n                if (object@hash == \"\") {\n                  filepath <- str_c(str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"),\"/\",basename(object@filepath))                        \n                } else {\n                  filepath <- str_c(object@hash,\"/\",str_replace_all(object@pathdest,fixed(\"\\\\\"), \"/\"),\"/\",basename(object@filepath))    \n                }\n              }              \n            }\n            return(filepath)\n          }\n)\n\n\n\nsetMethod(\"show\" ,\"PAFile\" ,\n          function(object) {\n            cat(toString(object))                                 \n          } \n)\n\nsetMethod(\"toString\",\"PAFile\",\n          function(x, input=TRUE) {\n            if (x@filepath == \"\") {\n              output <- str_c(\"$\",x@space, \"/\",x@pathdest)\n            } else {\n              if (.isRelative(x@filepath)) {\n                filepath <- file.path(x@working.dir, x@filepath)\n              } else {\n                filepath <- x@filepath\n              }\n              if (x@pathdest == \"\") {        \n                if (x@hash == \"\") {\n                  output <- str_c(filepath,\" \",ifelse(input,\"->\",\"<-\"),\" $\",x@space,\"/\",x@filepath)\n                } else {\n                  output <- str_c(filepath,\" \",ifelse(input,\"->\",\"<-\"),\" $\",x@space,\"/\", x@hash,\"/\",x@filepath)\n                }\n              } else {\n                output <- str_c(filepath,\" \",ifelse(input,\"->\",\"<-\"),\" $\",x@space, \"/\",x@pathdest,\"/\",basename(x@filepath))\n              }\n            }\n            \n            \n            return (output)            \n          }\n)\n\n.isRelative <- function(filepath) {\n  jfile <- .jnew(J(\"java.io.File\"),filepath)\n  return(!jfile$isAbsolute())\n}\n\n.computeInputModeFromSpaceName<- function(space) {\n  InputAccessMode <- J(\"org.ow2.proactive.scheduler.common.task.dataspaces.InputAccessMode\")\n  if (toupper(space) == \"INPUT\") {\n    mode <- InputAccessMode$getAccessMode(\"transferFromInputSpace\")  \n  } else if (toupper(space) == \"OUTPUT\") {\n    mode <- InputAccessMode$getAccessMode(\"transferFromOutputSpace\")  \n  } else if (toupper(space) == \"GLOBAL\") {\n    mode <- InputAccessMode$getAccessMode(\"transferFromGlobalSpace\")\n  } else if (toupper(space) == \"USER\") {\n    mode <- InputAccessMode$getAccessMode(\"transferFromUserSpace\")\n  }\n  return (mode)\n}\n\n.computeOutputModeFromSpaceName<- function(space) {\n  outputAccessMode <- J(\"org.ow2.proactive.scheduler.common.task.dataspaces.OutputAccessMode\")\n  if (toupper(space) == \"OUTPUT\") {\n    mode <- outputAccessMode$getAccessMode(\"transferToOutputSpace\")  \n  } else if (toupper(space) == \"GLOBAL\") {\n    mode <- outputAccessMode$getAccessMode(\"transferToGlobalSpace\")\n  } else if (toupper(space) == \"USER\") {\n    mode <- outputAccessMode$getAccessMode(\"transferToUserSpace\")\n  }\n  return (mode)\n}\n",
    "created" : 1434110765001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "635396634",
    "id" : "F71B5C30",
    "lastKnownWriteTime" : 1434034602,
    "path" : "C:/Users/fviale/IdeaProjects/r_connector/par-connector/src/main/r/R/PAFile.r",
    "project_path" : "R/PAFile.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}